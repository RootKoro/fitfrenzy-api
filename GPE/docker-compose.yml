version: '3.8'

services:
  lb:
      image: haproxy:2.2
      restart: always
      ports:
          - "3005:3005"
      volumes:
          - ./haproxy:/usr/local/etc/haproxy
      deploy:
          resources:
              limits:
                  memory: 2048M
      container_name: Haproxy

  mongodb:
    image: mongo:latest
    container_name: fitfrenzy-db
    restart: always
    # user: ${UID}
    volumes:
      # This volume line is to be used when
      # the `mongodb-volume` can't be mounted.
      # ?- ./database/db:/data/db:rw

      # This volume line will mostly
      # work on the unix based system
      # due to the `rights` system of windows.
      - mongodb-volume:/data/db:rw
    networks:
      - mongo-network

  # remove in production
  mongo-express:
    image: mongo-express:latest
    container_name: mongoexpress
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: password
    restart: always
    ports:
      - 8081:8081
    networks:
      - mongo-network
    depends_on:
      - mongodb
    
  user-service-api:
    container_name: user-service
    build:
        context: .
        target: development
        dockerfile: user-service/Dockerfile
    volumes:
      - user-service-volume:/workspace:rw
      - user-service-volume:/app:rw
      # - /workspace/node_modules
      - /app/node_modules
    restart: unless-stopped
    ports:
      - 3000:3000
    command: npm run start
    env_file:
      - user-service/.env
    networks:
      - mongo-network
    depends_on:
      - mongodb

  sport-service-api:
    container_name: sport-service
    build:
        context: .
        target: development
        dockerfile: sport-service/Dockerfile
    volumes:
      - sport-service-volume:/workspace:rw
      - sport-service-volume:/app:rw
      # - /workspace/node_modules
      - /app/node_modules
    restart: unless-stopped
    ports:
      - 3001:3001
    command: npm run start:dev
    env_file:
      - sport-service/.env
    networks:
      - mongo-network
    depends_on:
      - mongodb

  statistique-service-api:
    container_name: statistique-service
    build:
        context: .
        target: development
        dockerfile: statistique-service/Dockerfile
    volumes:
      - statistique-service-volume:/workspace:rw
      - statistique-service-volume:/app:rw
      # - /workspace/node_modules
      - /app/node_modules
    restart: unless-stopped
    ports:
      - 3004:3004
    command: npm run start:dev
    env_file:
      - statistique-service/.env
    networks:
      - mongo-network
    depends_on:
      - mongodb

  questionary-service-api:
    container_name: questionary-service
    build:
        context: .
        target: development
        dockerfile: questionary-service/Dockerfile
    volumes:
      - questionary-service-volume:/workspace:rw
      - questionary-service-volume:/app:rw
      # - /workspace/node_modules
      - /app/node_modules
    restart: unless-stopped
    ports:
      - 3003:3003
    command: npm run start:dev
    env_file:
      - questionary-service/.env
    networks:
      - mongo-network
    depends_on:
      - mongodb

  program-service-api:
    container_name: program-service
    build:
        context: .
        target: development
        dockerfile: program-service/Dockerfile
    volumes:
      - program-service-volume:/workspace:rw
      - program-service-volume:/app:rw
      # - /workspace/node_modules
      - /app/node_modules
    restart: unless-stopped
    ports:
      - 3002:3002
    command: npm run start:dev
    env_file:
      - program-service/.env
    networks:
      - mongo-network
    depends_on:
      - mongodb

volumes:
  # --------------------------------- #
  mongodb-volume:
    driver: local
    driver_opts:
      type: none
      device: ./database/db
      o: bind
  # --------------------------------- #
  user-service-volume:
    driver: local
    driver_opts:
      device: ./user-service
      type: none
      o: bind
  # --------------------------------- #
  questionary-service-volume:
    driver: local
    driver_opts:
      device: ./questionary-service
      type: none
      o: bind
  # --------------------------------- #
  sport-service-volume:
    driver: local
    driver_opts:
      device: ./sport-service
      type: none
      o: bind
  # --------------------------------- #
  statistique-service-volume:
    driver: local
    driver_opts:
      device: ./statistique-service
      type: none
      o: bind
  # --------------------------------- #
  program-service-volume:
    driver: local
    driver_opts:
      device: ./program-service
      type: none
      o: bind
  # --------------------------------- #

networks:
  mongo-network:
    driver: bridge
# expo_node_modules: {}
